{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19f5d818",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "def generate_random_points(n, dimension, low=0, high=100):\n",
    "    return np.random.uniform(low, high, size=(n, dimension))\n",
    "\n",
    "def divide_into_cells(points, r):\n",
    "    return np.floor(points / r).astype(int)\n",
    "\n",
    "def find_pairs(points, r, dimension):\n",
    "    pairs = set()\n",
    "    cells = {}\n",
    "\n",
    "    for i, point in enumerate(points):\n",
    "        cell = tuple(divide_into_cells(point, r))\n",
    "        cells.setdefault(cell, []).append(i)\n",
    "\n",
    "    for i, point in enumerate(points):\n",
    "        cell = tuple(divide_into_cells(point, r))\n",
    "\n",
    "        for offset in np.ndindex(tuple([3] * dimension)):\n",
    "            adjacent_cell = tuple(np.array(cell) + np.array(offset) - 1)\n",
    "            if all(0 <= c < 1 / r for c in adjacent_cell):\n",
    "                for j in cells.get(adjacent_cell, []):\n",
    "                    if i != j and np.linalg.norm(point - points[j]) <= r:\n",
    "                        pairs.add((min(i, j), max(i, j)))\n",
    "\n",
    "    return pairs\n",
    "\n",
    "n_points = 1000\n",
    "dimensions = [2, 3, 4, 10, 50, 100]\n",
    "r_values = range(1, 11)\n",
    "\n",
    "for d in dimensions:\n",
    "    points = generate_random_points(n_points, d)\n",
    "    for r in r_values:\n",
    "        cells = divide_into_cells(points, r)\n",
    "        plt.scatter(points[:, 0], points[:, 1], c='blue', marker='.')\n",
    "        plt.title(f'Dimension {d}, Grid Division with r={r}')\n",
    "        plt.show()\n",
    "        pairs = find_pairs(points, r, d)\n",
    "        print(f'Dimension {d}, r={r}, Number of pairs: {len(pairs)}')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
